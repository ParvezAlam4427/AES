Caesar Cipher (Substitution cipher)
java
Copy
Edit
import java.util.Scanner;

public class CaesarCipher {
    public static String encrypt(String text, int shift) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (Character.isLetter(c)) {
                char base = Character.isUpperCase(c) ? 'A' : 'a';
                c = (char) ((c - base + shift) % 26 + base);
            }
            result.append(c);
        }
        return result.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the plaintext: ");
        String text = sc.nextLine();
        System.out.print("Enter the shift value: ");
        int shift = sc.nextInt();
        System.out.println("Encrypted: " + encrypt(text, shift));
    }
}
🔐 Hill Cipher (Matrix-based cipher - 2x2 key)
java
Copy
Edit
// Hill Cipher Example (2x2 matrix)
import java.util.Scanner;

public class HillCipher {
    static int[][] key = {{3, 3}, {2, 5}}; // Must be invertible in mod 26

    public static String encrypt(String message) {
        message = message.toUpperCase().replaceAll("[^A-Z]", "");
        if (message.length() % 2 != 0) message += "X";
        StringBuilder encrypted = new StringBuilder();

        for (int i = 0; i < message.length(); i += 2) {
            int[] vector = {message.charAt(i) - 'A', message.charAt(i + 1) - 'A'};
            int[] result = {
                (key[0][0] * vector[0] + key[0][1] * vector[1]) % 26,
                (key[1][0] * vector[0] + key[1][1] * vector[1]) % 26
            };
            encrypted.append((char)(result[0] + 'A')).append((char)(result[1] + 'A'));
        }
        return encrypted.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter message: ");
        String msg = sc.nextLine();
        System.out.println("Encrypted: " + encrypt(msg));
    }
}
🔐 MD5 Hashing
java
Copy
Edit
import java.security.*;
import java.util.Scanner;

public class MD5Hash {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the string to hash: ");
        String input = sc.nextLine();

        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] messageDigest = md.digest(input.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : messageDigest) {
            sb.append(String.format("%02x", b));
        }
        System.out.println("MD5 Hash: " + sb.toString());
    }
}

AES (Advanced Encryption Standard)
java
Copy
Edit
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;
import java.util.Scanner;

public class AESEncryption {
    public static String encrypt(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String encryptedData, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
        return new String(decrypted);
    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text to encrypt: ");
        String text = sc.nextLine();

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128); // AES key size
        SecretKey key = keyGen.generateKey();

        String encrypted = encrypt(text, key);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = decrypt(encrypted, key);
        System.out.println("Decrypted: " + decrypted);
    }
}
🔐 DES (Data Encryption Standard)
java
Copy
Edit
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;
import java.util.Scanner;

public class DESEncryption {
    public static String encrypt(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String encryptedData, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
        return new String(decrypted);
    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text to encrypt: ");
        String text = sc.nextLine();

        KeyGenerator keyGen = KeyGenerator.getInstance("DES");
        keyGen.init(56); // DES key size
        SecretKey key = keyGen.generateKey();

        String encrypted = encrypt(text, key);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = decrypt(encrypted, key);
        System.out.println("Decrypted: " + decrypted);
    }
}
import java.util.Scanner;

public class RailFenceCipher {

    public static String encrypt(String text, int key) {
        if (key == 1) return text;

        StringBuilder[] rail = new StringBuilder[key];
        for (int i = 0; i < key; i++) rail[i] = new StringBuilder();

        int dir = 1, row = 0;
        for (char c : text.toCharArray()) {
            rail[row].append(c);
            row += dir;
            if (row == 0 || row == key - 1) dir *= -1;
        }

        StringBuilder result = new StringBuilder();
        for (StringBuilder sb : rail) result.append(sb);
        return result.toString();
    }

    public static String decrypt(String cipher, int key) {
        if (key == 1) return cipher;

        boolean[][] mark = new boolean[key][cipher.length()];
        int dir = 1, row = 0;

        // Mark the zigzag pattern
        for (int i = 0; i < cipher.length(); i++) {
            mark[row][i] = true;
            row += dir;
            if (row == 0 || row == key - 1) dir *= -1;
        }

        // Fill the rail with characters
        char[][] rail = new char[key][cipher.length()];
        int index = 0;
        for (int i = 0; i < key; i++) {
            for (int j = 0; j < cipher.length(); j++) {
                if (mark[i][j] && index < cipher.length()) {
                    rail[i][j] = cipher.charAt(index++);
                }
            }
        }

        // Read in zigzag
        StringBuilder result = new StringBuilder();
        dir = 1;
        row = 0;
        for (int i = 0; i < cipher.length(); i++) {
            result.append(rail[row][i]);
            row += dir;
            if (row == 0 || row == key - 1) dir *= -1;
        }

        return result.toString();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter text: ");
        String text = sc.nextLine().replaceAll("\\s+", "").toUpperCase();
        System.out.print("Enter key (number of rails): ");
        int key = sc.nextInt();

        String encrypted = encrypt(text, key);
        System.out.println("Encrypted: " + encrypted);

        String decrypted = decrypt(encrypted, key);
        System.out.println("Decrypted: " + decrypted);
    }
}
